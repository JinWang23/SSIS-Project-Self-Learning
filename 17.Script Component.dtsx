<?xml version="1.0"?>
<DTS:Executable xmlns:DTS="www.microsoft.com/SqlServer/Dts"
  DTS:refId="Package"
  DTS:CreationDate="2/21/2018 8:55:55 PM"
  DTS:CreationName="Microsoft.Package"
  DTS:CreatorComputerName="JWANG23"
  DTS:CreatorName="JWANG23\JinWang"
  DTS:DTSID="{EE53C46C-AA61-4065-83A4-EEC60634EF3D}"
  DTS:ExecutableType="Microsoft.Package"
  DTS:LastModifiedProductVersion="14.0.3006.16"
  DTS:LocaleID="1033"
  DTS:ObjectName="17 Script Component"
  DTS:PackageType="5"
  DTS:VersionBuild="4"
  DTS:VersionGUID="{39A19BAE-836F-46EE-B009-D1AF358B4CB5}">
  <DTS:Property
    DTS:Name="PackageFormatVersion">8</DTS:Property>
  <DTS:ConnectionManagers>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[dodgy data]"
      DTS:CreationName="FLATFILE"
      DTS:DTSID="{D800A2CE-696D-47CF-9908-FBEEDA902212}"
      DTS:ObjectName="dodgy data">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:Format="Delimited"
          DTS:LocaleID="1033"
          DTS:HeaderRowDelimiter="_x000D__x000A_"
          DTS:RowDelimiter=""
          DTS:TextQualifier="_x003C_none_x003E_"
          DTS:CodePage="936"
          DTS:ConnectionString="C:\Users\JinWang\Desktop\SSIS Learning\contestants.txt">
          <DTS:FlatFileColumns>
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="ContestantName"
              DTS:DTSID="{F6E9E1A2-F075-4879-BEE8-4A408C17D2A4}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:DataType="3"
              DTS:TextQualified="True"
              DTS:ObjectName="SeriesNumber"
              DTS:DTSID="{024C26DF-D5E5-4809-AA79-93BDA6908448}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x002C_"
              DTS:DataType="3"
              DTS:TextQualified="True"
              DTS:ObjectName="Position"
              DTS:DTSID="{1A3CDABC-AEAC-425C-BE40-63D2FB2BB16B}"
              DTS:CreationName="" />
            <DTS:FlatFileColumn
              DTS:ColumnType="Delimited"
              DTS:ColumnDelimiter="_x000D__x000A_"
              DTS:MaximumWidth="50"
              DTS:DataType="129"
              DTS:TextQualified="True"
              DTS:ObjectName="MentorName"
              DTS:DTSID="{454E4AB3-37E8-4490-9E76-E9C7432C4342}"
              DTS:CreationName="" />
          </DTS:FlatFileColumns>
        </DTS:ConnectionManager>
      </DTS:ObjectData>
    </DTS:ConnectionManager>
    <DTS:ConnectionManager
      DTS:refId="Package.ConnectionManagers[JWANG23\SQL2016SSDB.X-Factor]"
      DTS:CreationName="OLEDB"
      DTS:DTSID="{56799E97-7EFF-4BAB-B2CA-FD61E7BD4E71}"
      DTS:ObjectName="JWANG23\SQL2016SSDB.X-Factor">
      <DTS:ObjectData>
        <DTS:ConnectionManager
          DTS:ConnectionString="Data Source=JWANG23\SQL2016SSDB;Initial Catalog=X-Factor;Provider=SQLNCLI11.1;Integrated Security=SSPI;Auto Translate=False;" />
      </DTS:ObjectData>
    </DTS:ConnectionManager>
  </DTS:ConnectionManagers>
  <DTS:Variables />
  <DTS:Executables>
    <DTS:Executable
      DTS:refId="Package\Delete old data"
      DTS:CreationName="Microsoft.ExecuteSQLTask"
      DTS:Description="Execute SQL Task"
      DTS:DTSID="{03F84321-1961-4FB1-B3B5-F9F45CD87695}"
      DTS:ExecutableType="Microsoft.ExecuteSQLTask"
      DTS:LocaleID="-1"
      DTS:ObjectName="Delete old data"
      DTS:TaskContact="Execute SQL Task; Microsoft Corporation; SQL Server 2017 RC1; © 2017 Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1"
      DTS:ThreadHint="0">
      <DTS:Variables />
      <DTS:ObjectData>
        <SQLTask:SqlTaskData
          SQLTask:Connection="{56799E97-7EFF-4BAB-B2CA-FD61E7BD4E71}"
          SQLTask:SqlStatementSource="TRUNCATE TABLE tblGoodContestant;&#xA;TRUNCATE TABLE tblBadContestant;" xmlns:SQLTask="www.microsoft.com/sqlserver/dts/tasks/sqltask" />
      </DTS:ObjectData>
    </DTS:Executable>
    <DTS:Executable
      DTS:refId="Package\Import dodgy Data"
      DTS:CreationName="Microsoft.Pipeline"
      DTS:Description="Data Flow Task"
      DTS:DTSID="{8841A0B9-7062-4EE2-BF2A-9F7781582633}"
      DTS:ExecutableType="Microsoft.Pipeline"
      DTS:LocaleID="-1"
      DTS:ObjectName="Import dodgy Data"
      DTS:TaskContact="Performs high-performance data extraction, transformation and loading;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved;http://www.microsoft.com/sql/support/default.asp;1">
      <DTS:Variables />
      <DTS:ObjectData>
        <pipeline
          version="1">
          <components>
            <component
              refId="Package\Import dodgy Data\Conditional Split"
              componentClassID="Microsoft.ConditionalSplit"
              contactInfo="Conditional Split;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;0"
              description="Routes data rows to different outputs depending on the content of the data. Use conditions (SSIS expressions) to specify which rows are routed. For example, separate records that need to be cleaned from those that are ready to be loaded or route only a subset of records."
              name="Conditional Split"
              usesDispositions="true">
              <inputs>
                <input
                  refId="Package\Import dodgy Data\Conditional Split.Inputs[Conditional Split Input]"
                  description="Input to the Conditional Split Transformation"
                  name="Conditional Split Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Import dodgy Data\Conditional Split.Inputs[Conditional Split Input].Columns[IfGood]"
                      cachedDataType="bool"
                      cachedName="IfGood"
                      lineageId="Package\Import dodgy Data\Validate data.Outputs[Output 0].Columns[IfGood]" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Import dodgy Data\Conditional Split.Outputs[Good Data]"
                  description="Output 1 of the Conditional Split Transformation"
                  errorOrTruncationOperation="Computation"
                  errorRowDisposition="FailComponent"
                  exclusionGroup="1"
                  name="Good Data"
                  synchronousInputId="Package\Import dodgy Data\Conditional Split.Inputs[Conditional Split Input]"
                  truncationRowDisposition="FailComponent">
                  <properties>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the expression. This expression version uses lineage identifiers instead of column names."
                      name="Expression">#{Package\Import dodgy Data\Validate data.Outputs[Output 0].Columns[IfGood]} ==  TRUE </property>
                    <property
                      containsID="true"
                      dataType="System.String"
                      description="Specifies the friendly version of the expression. This expression version uses column names."
                      expressionType="Notify"
                      name="FriendlyExpression">IfGood ==  TRUE </property>
                    <property
                      dataType="System.Int32"
                      description="Specifies the position of the condition in the list of conditions that the transformation evaluates. The evaluation order is from the lowest to the highest value."
                      name="EvaluationOrder">0</property>
                  </properties>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Import dodgy Data\Conditional Split.Outputs[Bad Data]"
                  description="Default Output of the Conditional Split Transformation"
                  exclusionGroup="1"
                  name="Bad Data"
                  synchronousInputId="Package\Import dodgy Data\Conditional Split.Inputs[Conditional Split Input]">
                  <properties>
                    <property
                      dataType="System.Boolean"
                      name="IsDefaultOut">true</property>
                  </properties>
                  <externalMetadataColumns />
                </output>
                <output
                  refId="Package\Import dodgy Data\Conditional Split.Outputs[Conditional Split Error Output]"
                  description="Error Output of the Conditional Split Transformation"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="Conditional Split Error Output"
                  synchronousInputId="Package\Import dodgy Data\Conditional Split.Inputs[Conditional Split Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Import dodgy Data\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Import dodgy Data\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Import dodgy Data\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Import dodgy Data\Conditional Split.Outputs[Conditional Split Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Import dodgy Data\Dodgy data import"
              componentClassID="Microsoft.FlatFileSource"
              contactInfo="Flat File Source;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;1"
              description="Flat File Source"
              localeId="1033"
              name="Dodgy data import"
              usesDispositions="true"
              version="1">
              <properties>
                <property
                  dataType="System.Boolean"
                  description="Specifies whether zero-length columns are treated as null."
                  name="RetainNulls">false</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of an output column containing the file name. If no name is specified, no output column containing the file name will be generated."
                  name="FileNameColumnName"></property>
              </properties>
              <connections>
                <connection
                  refId="Package\Import dodgy Data\Dodgy data import.Connections[FlatFileConnection]"
                  connectionManagerID="Package.ConnectionManagers[dodgy data]"
                  connectionManagerRefId="Package.ConnectionManagers[dodgy data]"
                  name="FlatFileConnection" />
              </connections>
              <outputs>
                <output
                  refId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output]"
                  name="Flat File Source Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output].Columns[ContestantName]"
                      codePage="936"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output].ExternalColumns[ContestantName]"
                      length="50"
                      lineageId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output].Columns[ContestantName]"
                      name="ContestantName"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output].Columns[SeriesNumber]"
                      dataType="i4"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output].ExternalColumns[SeriesNumber]"
                      lineageId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output].Columns[SeriesNumber]"
                      name="SeriesNumber"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output].Columns[Position]"
                      dataType="i4"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output].ExternalColumns[Position]"
                      lineageId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output].Columns[Position]"
                      name="Position"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                    <outputColumn
                      refId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output].Columns[MentorName]"
                      codePage="936"
                      dataType="str"
                      errorOrTruncationOperation="Conversion"
                      errorRowDisposition="FailComponent"
                      externalMetadataColumnId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output].ExternalColumns[MentorName]"
                      length="50"
                      lineageId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output].Columns[MentorName]"
                      name="MentorName"
                      truncationRowDisposition="FailComponent">
                      <properties>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the column uses the faster, locale-neutral parsing routines."
                          name="FastParse">false</property>
                        <property
                          dataType="System.Boolean"
                          description="Indicates whether the data is in binary format."
                          name="UseBinaryFormat">false</property>
                      </properties>
                    </outputColumn>
                  </outputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output].ExternalColumns[ContestantName]"
                      codePage="936"
                      dataType="str"
                      length="50"
                      name="ContestantName" />
                    <externalMetadataColumn
                      refId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output].ExternalColumns[SeriesNumber]"
                      dataType="i4"
                      name="SeriesNumber" />
                    <externalMetadataColumn
                      refId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output].ExternalColumns[Position]"
                      dataType="i4"
                      name="Position" />
                    <externalMetadataColumn
                      refId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output].ExternalColumns[MentorName]"
                      codePage="936"
                      dataType="str"
                      length="50"
                      name="MentorName" />
                  </externalMetadataColumns>
                </output>
                <output
                  refId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Error Output]"
                  isErrorOut="true"
                  name="Flat File Source Error Output">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]"
                      codePage="1252"
                      dataType="text"
                      description="Flat File Source Error Output Column"
                      lineageId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Error Output].Columns[Flat File Source Error Output Column]"
                      name="Flat File Source Error Output Column" />
                    <outputColumn
                      refId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Import dodgy Data\Import bad data"
              componentClassID="Microsoft.OLEDBDestination"
              contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
              description="OLE DB Destination"
              name="Import bad data"
              usesDispositions="true"
              version="4">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[dbo].[tblBadContestant]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">3</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepIdentity">false</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepNulls">false</property>
                <property
                  dataType="System.String"
                  description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                  name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                <property
                  dataType="System.Int32"
                  description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                  name="FastLoadMaxInsertCommitSize">2147483647</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Import dodgy Data\Import bad data.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[JWANG23\SQL2016SSDB.X-Factor]"
                  connectionManagerRefId="Package.ConnectionManagers[JWANG23\SQL2016SSDB.X-Factor]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Import dodgy Data\Import bad data.Inputs[OLE DB Destination Input]"
                  errorOrTruncationOperation="Insert"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Import dodgy Data\Import bad data.Inputs[OLE DB Destination Input].Columns[ContestantName]"
                      cachedCodepage="936"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="ContestantName"
                      externalMetadataColumnId="Package\Import dodgy Data\Import bad data.Inputs[OLE DB Destination Input].ExternalColumns[ContestantName]"
                      lineageId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output].Columns[ContestantName]" />
                    <inputColumn
                      refId="Package\Import dodgy Data\Import bad data.Inputs[OLE DB Destination Input].Columns[MentorName]"
                      cachedCodepage="936"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="MentorName"
                      externalMetadataColumnId="Package\Import dodgy Data\Import bad data.Inputs[OLE DB Destination Input].ExternalColumns[Mentor]"
                      lineageId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output].Columns[MentorName]" />
                    <inputColumn
                      refId="Package\Import dodgy Data\Import bad data.Inputs[OLE DB Destination Input].Columns[IntSeries]"
                      cachedDataType="i4"
                      cachedName="IntSeries"
                      externalMetadataColumnId="Package\Import dodgy Data\Import bad data.Inputs[OLE DB Destination Input].ExternalColumns[SeriesNumber]"
                      lineageId="Package\Import dodgy Data\Validate data.Outputs[Output 0].Columns[IntSeries]" />
                    <inputColumn
                      refId="Package\Import dodgy Data\Import bad data.Inputs[OLE DB Destination Input].Columns[IntPosition]"
                      cachedDataType="i4"
                      cachedName="IntPosition"
                      externalMetadataColumnId="Package\Import dodgy Data\Import bad data.Inputs[OLE DB Destination Input].ExternalColumns[Position]"
                      lineageId="Package\Import dodgy Data\Validate data.Outputs[Output 0].Columns[IntPosition]" />
                    <inputColumn
                      refId="Package\Import dodgy Data\Import bad data.Inputs[OLE DB Destination Input].Columns[Problem]"
                      cachedCodepage="936"
                      cachedDataType="str"
                      cachedLength="1000"
                      cachedName="Problem"
                      externalMetadataColumnId="Package\Import dodgy Data\Import bad data.Inputs[OLE DB Destination Input].ExternalColumns[Problem]"
                      lineageId="Package\Import dodgy Data\Validate data.Outputs[Output 0].Columns[Problem]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Import dodgy Data\Import bad data.Inputs[OLE DB Destination Input].ExternalColumns[ContestantName]"
                      codePage="936"
                      dataType="str"
                      length="255"
                      name="ContestantName" />
                    <externalMetadataColumn
                      refId="Package\Import dodgy Data\Import bad data.Inputs[OLE DB Destination Input].ExternalColumns[SeriesNumber]"
                      dataType="i4"
                      name="SeriesNumber" />
                    <externalMetadataColumn
                      refId="Package\Import dodgy Data\Import bad data.Inputs[OLE DB Destination Input].ExternalColumns[Position]"
                      dataType="i4"
                      name="Position" />
                    <externalMetadataColumn
                      refId="Package\Import dodgy Data\Import bad data.Inputs[OLE DB Destination Input].ExternalColumns[Mentor]"
                      codePage="936"
                      dataType="str"
                      length="255"
                      name="Mentor" />
                    <externalMetadataColumn
                      refId="Package\Import dodgy Data\Import bad data.Inputs[OLE DB Destination Input].ExternalColumns[Problem]"
                      codePage="936"
                      dataType="text"
                      name="Problem" />
                  </externalMetadataColumns>
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Import dodgy Data\Import bad data.Outputs[OLE DB Destination Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Destination Error Output"
                  synchronousInputId="Package\Import dodgy Data\Import bad data.Inputs[OLE DB Destination Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Import dodgy Data\Import bad data.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Import dodgy Data\Import bad data.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Import dodgy Data\Import bad data.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Import dodgy Data\Import bad data.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Import dodgy Data\Import good data"
              componentClassID="Microsoft.OLEDBDestination"
              contactInfo="OLE DB Destination;Microsoft Corporation; Microsoft SQL Server; (C) Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;4"
              description="OLE DB Destination"
              name="Import good data"
              usesDispositions="true"
              version="4">
              <properties>
                <property
                  dataType="System.Int32"
                  description="The number of seconds before a command times out.  A value of 0 indicates an infinite time-out."
                  name="CommandTimeout">0</property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the database object used to open a rowset."
                  name="OpenRowset">[dbo].[tblGoodContestant]</property>
                <property
                  dataType="System.String"
                  description="Specifies the variable that contains the name of the database object used to open a rowset."
                  name="OpenRowsetVariable"></property>
                <property
                  dataType="System.String"
                  description="The SQL command to be executed."
                  name="SqlCommand"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ModalMultilineStringEditor"></property>
                <property
                  dataType="System.Int32"
                  description="Specifies the column code page to use when code page information is unavailable from the data source."
                  name="DefaultCodePage">1252</property>
                <property
                  dataType="System.Boolean"
                  description="Forces the use of the DefaultCodePage property value when describing character data."
                  name="AlwaysUseDefaultCodePage">false</property>
                <property
                  dataType="System.Int32"
                  description="Specifies the mode used to access the database."
                  name="AccessMode"
                  typeConverter="AccessMode">3</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the values supplied for identity columns will be copied to the destination. If false, values for identity columns will be auto-generated at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepIdentity">false</property>
                <property
                  dataType="System.Boolean"
                  description="Indicates whether the columns containing null will have null inserted in the destination. If false, columns containing null will have their default values inserted at the destination. Applies only if fast load is turned on."
                  name="FastLoadKeepNulls">true</property>
                <property
                  dataType="System.String"
                  description="Specifies options to be used with fast load.  Applies only if fast load is turned on."
                  name="FastLoadOptions">TABLOCK,CHECK_CONSTRAINTS</property>
                <property
                  dataType="System.Int32"
                  description="Specifies when commits are issued during data insertion.  A value of 0 specifies that one commit will be issued at the end of data insertion.  Applies only if fast load is turned on."
                  name="FastLoadMaxInsertCommitSize">2147483647</property>
              </properties>
              <connections>
                <connection
                  refId="Package\Import dodgy Data\Import good data.Connections[OleDbConnection]"
                  connectionManagerID="Package.ConnectionManagers[JWANG23\SQL2016SSDB.X-Factor]"
                  connectionManagerRefId="Package.ConnectionManagers[JWANG23\SQL2016SSDB.X-Factor]"
                  description="The OLE DB runtime connection used to access the database."
                  name="OleDbConnection" />
              </connections>
              <inputs>
                <input
                  refId="Package\Import dodgy Data\Import good data.Inputs[OLE DB Destination Input]"
                  errorOrTruncationOperation="Insert"
                  errorRowDisposition="FailComponent"
                  hasSideEffects="true"
                  name="OLE DB Destination Input">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Import dodgy Data\Import good data.Inputs[OLE DB Destination Input].Columns[ContestantName]"
                      cachedCodepage="936"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="ContestantName"
                      externalMetadataColumnId="Package\Import dodgy Data\Import good data.Inputs[OLE DB Destination Input].ExternalColumns[ContestantName]"
                      lineageId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output].Columns[ContestantName]" />
                    <inputColumn
                      refId="Package\Import dodgy Data\Import good data.Inputs[OLE DB Destination Input].Columns[MentorName]"
                      cachedCodepage="936"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="MentorName"
                      externalMetadataColumnId="Package\Import dodgy Data\Import good data.Inputs[OLE DB Destination Input].ExternalColumns[Mentor]"
                      lineageId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output].Columns[MentorName]" />
                    <inputColumn
                      refId="Package\Import dodgy Data\Import good data.Inputs[OLE DB Destination Input].Columns[IntSeries]"
                      cachedDataType="i4"
                      cachedName="IntSeries"
                      externalMetadataColumnId="Package\Import dodgy Data\Import good data.Inputs[OLE DB Destination Input].ExternalColumns[SeriesNumber]"
                      lineageId="Package\Import dodgy Data\Validate data.Outputs[Output 0].Columns[IntSeries]" />
                    <inputColumn
                      refId="Package\Import dodgy Data\Import good data.Inputs[OLE DB Destination Input].Columns[IntPosition]"
                      cachedDataType="i4"
                      cachedName="IntPosition"
                      externalMetadataColumnId="Package\Import dodgy Data\Import good data.Inputs[OLE DB Destination Input].ExternalColumns[Position]"
                      lineageId="Package\Import dodgy Data\Validate data.Outputs[Output 0].Columns[IntPosition]" />
                  </inputColumns>
                  <externalMetadataColumns
                    isUsed="True">
                    <externalMetadataColumn
                      refId="Package\Import dodgy Data\Import good data.Inputs[OLE DB Destination Input].ExternalColumns[ContestantName]"
                      codePage="936"
                      dataType="str"
                      length="255"
                      name="ContestantName" />
                    <externalMetadataColumn
                      refId="Package\Import dodgy Data\Import good data.Inputs[OLE DB Destination Input].ExternalColumns[SeriesNumber]"
                      dataType="i4"
                      name="SeriesNumber" />
                    <externalMetadataColumn
                      refId="Package\Import dodgy Data\Import good data.Inputs[OLE DB Destination Input].ExternalColumns[Position]"
                      dataType="i4"
                      name="Position" />
                    <externalMetadataColumn
                      refId="Package\Import dodgy Data\Import good data.Inputs[OLE DB Destination Input].ExternalColumns[Mentor]"
                      codePage="936"
                      dataType="str"
                      length="255"
                      name="Mentor" />
                  </externalMetadataColumns>
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Import dodgy Data\Import good data.Outputs[OLE DB Destination Error Output]"
                  exclusionGroup="1"
                  isErrorOut="true"
                  name="OLE DB Destination Error Output"
                  synchronousInputId="Package\Import dodgy Data\Import good data.Inputs[OLE DB Destination Input]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Import dodgy Data\Import good data.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      dataType="i4"
                      lineageId="Package\Import dodgy Data\Import good data.Outputs[OLE DB Destination Error Output].Columns[ErrorCode]"
                      name="ErrorCode"
                      specialFlags="1" />
                    <outputColumn
                      refId="Package\Import dodgy Data\Import good data.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      dataType="i4"
                      lineageId="Package\Import dodgy Data\Import good data.Outputs[OLE DB Destination Error Output].Columns[ErrorColumn]"
                      name="ErrorColumn"
                      specialFlags="2" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
            <component
              refId="Package\Import dodgy Data\Validate data"
              componentClassID="Microsoft.ManagedComponentHost"
              contactInfo="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum.;Microsoft Corporation; Microsoft SQL Server; Microsoft Corporation; All Rights Reserved; http://www.microsoft.com/sql/support;11"
              description="Includes and runs custom script code. For example, apply a business rule that limits the range of valid values in an &quot;income&quot; column or add values in two columns and calculate the average of the sum."
              name="Validate data"
              version="11">
              <properties>
                <property
                  dataType="System.String"
                  description="Stores the source code of the component"
                  isArray="true"
                  name="SourceCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="30">
                    <arrayElement
                      dataType="System.String"><![CDATA[ComponentWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services component wrapper
*  This module defines the base class for your component
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */

using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;

public class UserComponent: ScriptComponent
{
    public Connections Connections;
    public Variables Variables;
    public UserComponent()
    {
        Connections = new Connections(this);
        Variables = new Variables(this);
    }

    public override void ProcessInput(int InputID, string InputName, PipelineBuffer Buffer, OutputNameMap OutputMap)
    {

        if (InputName.Equals(@"Input 0", StringComparison.Ordinal))
        {
            Input0_ProcessInput(new Input0Buffer(Buffer, GetColumnIndexes(InputID), OutputMap));
        }

    }

    public virtual void Input0_ProcessInput(Input0Buffer Buffer)
    {
        while (Buffer.NextRow())
        {
            Input0_ProcessInputRow(Buffer);
        }
    }

    public virtual void Input0_ProcessInputRow(Input0Buffer Row)
    {
    }

}

public class Connections
{
    ScriptComponent ParentComponent;

    public Connections(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}

public class Variables
{
    ScriptComponent ParentComponent;

    public Variables(ScriptComponent Component)
    {
        ParentComponent = Component;
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.resx]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
</root>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[main.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[#region Help:  Introduction to the Script Component
/* The Script Component allows you to perform virtually any operation that can be accomplished in
 * a .Net application within the context of an Integration Services data flow.
 *
 * Expand the other regions which have "Help" prefixes for examples of specific ways to use
 * Integration Services features within this script component. */
#endregion

#region Namespaces
using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;
using Microsoft.SqlServer.Dts.Runtime.Wrapper;
#endregion

/// <summary>
/// This is the class to which to add your code.  Do not change the name, attributes, or parent
/// of this class.
/// </summary>
[Microsoft.SqlServer.Dts.Pipeline.SSISScriptComponentEntryPointAttribute]
public class ScriptMain : UserComponent
{
    #region Help:  Using Integration Services variables and parameters
    /* To use a variable in this script, first ensure that the variable has been added to
     * either the list contained in the ReadOnlyVariables property or the list contained in
     * the ReadWriteVariables property of this script component, according to whether or not your
     * code needs to write into the variable.  To do so, save this script, close this instance of
     * Visual Studio, and update the ReadOnlyVariables and ReadWriteVariables properties in the
     * Script Transformation Editor window.
     * To use a parameter in this script, follow the same steps. Parameters are always read-only.
     *
     * Example of reading from a variable or parameter:
     *  DateTime startTime = Variables.MyStartTime;
     *
     * Example of writing to a variable:
     *  Variables.myStringVariable = "new value";
     */
    #endregion

    #region Help:  Using Integration Services Connnection Managers
    /* Some types of connection managers can be used in this script component.  See the help topic
     * "Working with Connection Managers Programatically" for details.
     *
     * To use a connection manager in this script, first ensure that the connection manager has
     * been added to either the list of connection managers on the Connection Managers page of the
     * script component editor.  To add the connection manager, save this script, close this instance of
     * Visual Studio, and add the Connection Manager to the list.
     *
     * If the component needs to hold a connection open while processing rows, override the
     * AcquireConnections and ReleaseConnections methods.
     * 
     * Example of using an ADO.Net connection manager to acquire a SqlConnection:
     *  object rawConnection = Connections.SalesDB.AcquireConnection(transaction);
     *  SqlConnection salesDBConn = (SqlConnection)rawConnection;
     *
     * Example of using a File connection manager to acquire a file path:
     *  object rawConnection = Connections.Prices_zip.AcquireConnection(transaction);
     *  string filePath = (string)rawConnection;
     *
     * Example of releasing a connection manager:
     *  Connections.SalesDB.ReleaseConnection(rawConnection);
     */
    #endregion

    #region Help:  Firing Integration Services Events
    /* This script component can fire events.
     *
     * Example of firing an error event:
     *  ComponentMetaData.FireError(10, "Process Values", "Bad value", "", 0, out cancel);
     *
     * Example of firing an information event:
     *  ComponentMetaData.FireInformation(10, "Process Values", "Processing has started", "", 0, fireAgain);
     *
     * Example of firing a warning event:
     *  ComponentMetaData.FireWarning(10, "Process Values", "No rows were received", "", 0);
     */
    #endregion

    public override void Input0_ProcessInputRow(Input0Buffer Row)
    {
        // if any of the fields are null, say so and exit
        if (Row.ContestantName_IsNull ||
        Row.Position_IsNull || Row.SeriesNumber_IsNull ||
        Row.MentorName_IsNull)
        {
            Row.Problem = "At least one column is not filled in";
            Row.IfGood = false;
            return;
        }

        // try to convert series/position numbers to integers
        int s = 0;
        int p = 0;

        try
        {
            s = Convert.ToInt32(Row.SeriesNumber);
        }
        catch
        {
            s = 0;
        }

        try
        {
            p = Convert.ToInt32(Row.Position);
        }
        catch
        {
            p = 0;
        }

        // if either still 0, we couldn't convert
        if (s == 0 || p == 0)
        {
            Row.Problem = "The series and position numbers aren't both integers";
            Row.IfGood = false;
            return;
        }

        // store the correct numbers for position and series
        Row.IntSeries = s;
        Row.IntPosition = p;

        // trim the mentor and contestant fields
        Row.MentorName = Row.MentorName.Trim();
        Row.ContestantName = Row.ContestantName.Trim();

        // record fact all worked OK
        Row.Problem = "";
        Row.IfGood = true;
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[BufferWrapper.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[/* THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT!
*  Microsoft SQL Server Integration Services buffer wrappers
*  This module defines classes for accessing data flow buffers
*  THIS IS AUTO-GENERATED CODE THAT WILL BE OVERWRITTEN! DO NOT EDIT! */



using System;
using System.Data;
using Microsoft.SqlServer.Dts.Pipeline;
using Microsoft.SqlServer.Dts.Pipeline.Wrapper;

public class Input0Buffer: ScriptBuffer

{
    public Input0Buffer(PipelineBuffer Buffer, int[] BufferColumnIndexes, OutputNameMap OutputMap)
        : base(Buffer, BufferColumnIndexes, OutputMap)
    {
    }

    public String ContestantName
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[0]);
        }
        set
        {
            this[0] = value;
        }
    }
    public bool ContestantName_IsNull
    {
        get
        {
            return IsNull(0);
        }
        set
        {
            if (value)
            {
                SetNull(0);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 SeriesNumber
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[1]);
        }
    }
    public bool SeriesNumber_IsNull
    {
        get
        {
            return IsNull(1);
        }
    }

    public Int32 Position
    {
        get
        {
            return Buffer.GetInt32(BufferColumnIndexes[2]);
        }
    }
    public bool Position_IsNull
    {
        get
        {
            return IsNull(2);
        }
    }

    public String MentorName
    {
        get
        {
            return Buffer.GetString(BufferColumnIndexes[3]);
        }
        set
        {
            this[3] = value;
        }
    }
    public bool MentorName_IsNull
    {
        get
        {
            return IsNull(3);
        }
        set
        {
            if (value)
            {
                SetNull(3);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Boolean IfGood
    {
        set
        {
            this[4] = value;
        }
    }
    public bool IfGood_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(4);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public String Problem
    {
        set
        {
            this[5] = value;
        }
    }
    public bool Problem_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(5);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 IntPosition
    {
        set
        {
            this[6] = value;
        }
    }
    public bool IntPosition_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(6);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    public Int32 IntSeries
    {
        set
        {
            this[7] = value;
        }
    }
    public bool IntSeries_IsNull
    {
        set
        {
            if (value)
            {
                SetNull(7);
            }
            else
            {
                throw new InvalidOperationException("IsNull property cannot be set to False. Assign a value to the column instead.");
            }
        }
    }

    new public bool NextRow()
    {
        return base.NextRow();
    }

    new public bool EndOfRowset()
    {
        return base.EndOfRowset();
    }

}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_12a6c76d2fdf425c9d5a4db50c5be163.Properties.Settings.get_Default():SC_12a6c76d2fdf425c9d5a4db50c5be163.Properties.Sett" +
    "ings")]

namespace SC_12a6c76d2fdf425c9d5a4db50c5be163.Properties {
    
    
    internal sealed partial class Settings : global::System.Configuration.ApplicationSettingsBase {
        
        [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        private static Settings defaultInstance = new Settings();
        
        public static Settings Default {
            get {
                return defaultInstance;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Resources.Designer.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_12a6c76d2fdf425c9d5a4db50c5be163.Properties.Resources.get_ResourceManager():System.Resources.Resou" +
    "rceManager")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_12a6c76d2fdf425c9d5a4db50c5be163.Properties.Resources.get_Culture():System.Globalization.CultureIn" +
    "fo")]
[assembly: global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode", Scope="member", Target="SC_12a6c76d2fdf425c9d5a4db50c5be163.Properties.Resources.set_Culture(System.Globalization.CultureInfo" +
    "):Void")]

namespace SC_12a6c76d2fdf425c9d5a4db50c5be163.Properties {
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    internal class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if ((resourceMan == null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("SC_12a6c76d2fdf425c9d5a4db50c5be163.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
    }
}
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Project]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF16LE]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="UTF-16" standalone="yes"?>
<c:Project xmlns:c="http://schemas.microsoft.com/codeprojectml/2010/08/main" xmlns:msb="http://schemas.microsoft.com/developer/msbuild/2003" runtimeVersion="3.0" schemaVersion="1.0">
	<msb:PropertyGroup>
		<msb:Language>msBuild</msb:Language>
		<msb:CodeName>SC_12a6c76d2fdf425c9d5a4db50c5be163</msb:CodeName>
		<msb:DisplayName>SC_12a6c76d2fdf425c9d5a4db50c5be163</msb:DisplayName>
		<msb:ProjectId>{490DFB94-4057-48B2-A788-E0354A363F6D}</msb:ProjectId>
	</msb:PropertyGroup>
	<msb:ItemGroup>
		<msb:Project Include="SC_12a6c76d2fdf425c9d5a4db50c5be163.csproj"/>
		<msb:File Include="Properties\Settings.settings"/>
		<msb:File Include="Properties\AssemblyInfo.cs"/>
		<msb:File Include="Properties\Resources.resx"/>
		<msb:File Include="Properties\Resources.Designer.cs"/>
		<msb:File Include="BufferWrapper.cs"/>
		<msb:File Include="main.cs"/>
		<msb:File Include="Properties\Settings.Designer.cs"/>
		<msb:File Include="ComponentWrapper.cs"/>
	</msb:ItemGroup>
</c:Project>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\AssemblyInfo.cs]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[using System.Reflection;
using System.Runtime.CompilerServices;

//
// General Information about an assembly is controlled through the following 
// set of attributes. Change these attribute values to modify the information
// associated with an assembly.
//
[assembly: AssemblyTitle("SC_12a6c76d2fdf425c9d5a4db50c5be163")]
[assembly: AssemblyDescription("")]
[assembly: AssemblyConfiguration("")]
[assembly: AssemblyCompany("")]
[assembly: AssemblyProduct("SC_12a6c76d2fdf425c9d5a4db50c5be163")]
[assembly: AssemblyCopyright("Copyright @  2018")]
[assembly: AssemblyTrademark("")]
[assembly: AssemblyCulture("")]
//
// Version information for an assembly consists of the following four values:
//
//      Major Version
//      Minor Version 
//      Build Number
//      Revision
//
// You can specify all the values or you can default the Revision and Build Numbers 
// by using the '*' as shown below:

[assembly: AssemblyVersion("1.0.0.0")]
]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[Properties\Settings.settings]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version='1.0' encoding='iso-8859-1'?>
<SettingsFile xmlns="uri:settings" CurrentProfile="(Default)">
  <Profiles>
    <Profile Name="(Default)" />
  </Profiles>
  <Settings />
</SettingsFile>]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_12a6c76d2fdf425c9d5a4db50c5be163.csproj]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[UTF8]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[<?xml version="1.0" encoding="utf-8"?>
<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <ProjectTypeGuids>{30D016F9-3734-4E33-A861-5E7D899E18F3};{FAE04EC0-301F-11D3-BF4B-00C04F79EFBC}</ProjectTypeGuids>
    <Configuration Condition=" '$(Configuration)' == '' ">Debug</Configuration>
    <Platform Condition=" '$(Platform)' == '' ">AnyCPU</Platform>
    <ProductVersion>8.0.30703</ProductVersion>
    <SchemaVersion>2.0</SchemaVersion>
    <ProjectGuid>{eb89b112-480e-491e-bb5c-2ec4b68d5b0a}</ProjectGuid>
    <OutputType>Library</OutputType>
    <AppDesignerFolder>Properties</AppDesignerFolder>
    <RootNamespace>SC_12a6c76d2fdf425c9d5a4db50c5be163</RootNamespace>
    <AssemblyName>SC_12a6c76d2fdf425c9d5a4db50c5be163</AssemblyName>
    <TargetFrameworkVersion>v4.5</TargetFrameworkVersion>
    <FileAlignment>512</FileAlignment>
    <ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>true</ResolveAssemblyReferenceIgnoreTargetFrameworkAttributeVersionMismatch>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Debug' ">
    <DebugSymbols>true</DebugSymbols>
    <DebugType>full</DebugType>
    <Optimize>false</Optimize>
    <OutputPath>.\bin\Debug\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>DEBUG;TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <PropertyGroup Condition=" '$(Configuration)' == 'Release' ">
    <DebugSymbols>false</DebugSymbols>
    <Optimize>true</Optimize>
    <OutputPath>.\bin\Release\</OutputPath>
    <EnableUnmanagedDebugging>false</EnableUnmanagedDebugging>
    <DefineConstants>TRACE</DefineConstants>
    <ErrorReport>prompt</ErrorReport>
    <WarningLevel>4</WarningLevel>
  </PropertyGroup>
  <ItemGroup>
    <Reference Include="System" />
    <Reference Include="System.Data" />
    <Reference Include="System.Windows.Forms" />
    <Reference Include="System.Xml" />
    <Reference Include="Microsoft.SqlServer.TxScript, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSRuntimeWrap, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.DTSPipelineWrap, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Reference Include="Microsoft.SqlServer.PipelineHost, Version=14.0.0.0, Culture=neutral, PublicKeyToken=89845dcd8080cc91" />
    <Compile Include="main.cs" />
    <Compile Include="BufferWrapper.cs" />
    <Compile Include="ComponentWrapper.cs" />
  </ItemGroup>
  <ItemGroup>
    <AppDesigner Include="Properties\" />
    <Compile Include="Properties\AssemblyInfo.cs">
      <SubType>Code</SubType>
    </Compile>
    <EmbeddedResource Include="Properties\Resources.resx">
      <Generator>ResXFileCodeGenerator</Generator>
      <LastGenOutput>Resources.Designer.cs</LastGenOutput>
    </EmbeddedResource>
    <Compile Include="Properties\Resources.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Resources.resx</DependentUpon>
    </Compile>
    <None Include="Properties\Settings.settings">
      <Generator>SettingsSingleFileGenerator</Generator>
      <LastGenOutput>Settings.Designer.cs</LastGenOutput>
    </None>
    <Compile Include="Properties\Settings.Designer.cs">
      <AutoGen>True</AutoGen>
      <DependentUpon>Settings.settings</DependentUpon>
    </Compile>
  </ItemGroup>
  <!-- Include the build rules for a C# project.-->
  <Import Project="$(MSBuildBinPath)\Microsoft.CSharp.targets" />
  <!-- This section defines VSTA properties that describe the host-changable project properties. -->
  <ProjectExtensions>
    <VisualStudio>
      <FlavorProperties GUID="{30D016F9-3734-4E33-A861-5E7D899E18F3}">
        <ProjectProperties HostName="ScriptComponent" HostPackage="{B3A685AA-7EAF-4BC6-9940-57959FA5AC07}" ApplicationType="usd" Language="cs" TemplatesPath="" DebugInfoExeName="" DebugInfoCommandLine="" DebugInfoWorkingDir="" IconImageList="" />
        <Host Name="ScriptComponent" GeneratedNamespace="SC_12a6c76d2fdf425c9d5a4db50c5be163" IconIndex="0"></Host>
        <ProjectClient>
          <HostIdentifier>SSIS_SC130</HostIdentifier>
        </ProjectClient>
      </FlavorProperties>
    </VisualStudio>
  </ProjectExtensions>
</Project>]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Stores the binary representation of the component"
                  isArray="true"
                  name="BinaryCode"
                  state="cdata">
                  <arrayElements
                    arrayElementCount="2">
                    <arrayElement
                      dataType="System.String"><![CDATA[SC_12a6c76d2fdf425c9d5a4db50c5be163.dll]]></arrayElement>
                    <arrayElement
                      dataType="System.String"><![CDATA[TVqQAAMAAAAEAAAA//8AALgAAAAAAAAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAgAAAAA4fug4AtAnNIbgBTM0hVGhpcyBwcm9ncmFtIGNhbm5vdCBiZSBydW4gaW4gRE9TIG1v
ZGUuDQ0KJAAAAAAAAABQRQAATAEDABZFjloAAAAAAAAAAOAAIiALATAAABgAAAAIAAAAAAAAOjcA
AAAgAAAAQAAAAAAAEAAgAAAAAgAABAAAAAAAAAAGAAAAAAAAAACAAAAAAgAAAAAAAAMAYIUAABAA
ABAAAAAAEAAAEAAAAAAAABAAAAAAAAAAAAAAAOg2AABPAAAAAEAAAEgEAAAAAAAAAAAAAAAAAAAA
AAAAAGAAAAwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAIAAACAAAAAAAAAAAAAAACCAAAEgAAAAAAAAAAAAAAC50ZXh0AAAAQBcAAAAgAAAAGAAAAAIA
AAAAAAAAAAAAAAAAACAAAGAucnNyYwAAAEgEAAAAQAAAAAYAAAAaAAAAAAAAAAAAAAAAAABAAABA
LnJlbG9jAAAMAAAAAGAAAAACAAAAIAAAAAAAAAAAAAAAAAAAQAAAQgAAAAAAAAAAAAAAAAAAAAAc
NwAAAAAAAEgAAAACAAUAfCMAALQSAAABAAAAAAAAADA2AAC4AAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAABswAgC6AAAAAQAAEQNvBgAABi0YA28LAAAGLRADbwkAAAYt
CANvDgAABiwTA3IBAABwbxIAAAYDFm8QAAAGKhYKFgsDbwgAAAYoEAAACgreBSYWCt4AAANvCgAA
BigQAAAKC94FJhYL3gAGLAMHLRMDcksAAHBvEgAABgMWbxAAAAYqAwZvFgAABgMHbxQAAAYDJW8M
AAAGbxEAAApvDQAABgMlbwQAAAZvEQAACm8FAAAGA3K1AABwbxIAAAYDF28QAAAGKgAAARwAAAAA
NwAORQAFDgAAAQAASwAOWQAFDgAAAR4CKBoAAAYqKgIDBAUoEgAACipSAnsTAAAKAnsUAAAKFpRv
FQAACiomAhYDKBYAAAoqIgIWKBcAAAoqWgMsCAIWKBgAAAoqcrcAAHBzGQAACnpSAnsTAAAKAnsU
AAAKF5RvGgAACioiAhcoFwAACipSAnsTAAAKAnsUAAAKGJRvGgAACioiAhgoFwAACipSAnsTAAAK
AnsUAAAKGZRvFQAACiomAhkDKBYAAAoqIgIZKBcAAAoqWgMsCAIZKBgAAAoqcrcAAHBzGQAACno6
AhoDjB0AAAEoFgAACipaAywIAhooGAAACipytwAAcHMZAAAKeiYCGwMoFgAACipaAywIAhsoGAAA
CipytwAAcHMZAAAKejoCHAOMHgAAASgWAAAKKloDLAgCHCgYAAAKKnK3AABwcxkAAAp6OgIdA4we
AAABKBYAAAoqWgMsCAIdKBgAAAoqcrcAAHBzGQAACnoeAigbAAAKKh4CKBwAAAoqfgIoHQAACgIC
cx4AAAZ9AQAABAICcx8AAAZ9AgAABCqSBHJUAQBwGm8eAAAKLBUCBQIDKB8AAAoOBHMDAAAGbxwA
AAYqSisHAgNvHQAABgNvGAAABi3xKgYqOgIoIAAACgIDfQMAAAQqOgIoIAAACgIDfQQAAAQqHgIo
IAAACiqufgUAAAQtHnJkAQBw0AcAAAIoIQAACm8iAAAKcyMAAAqABQAABH4FAAAEKhp+BgAABCoe
AoAGAAAEKhp+BwAABCoeAigkAAAKKi5zJQAABoAHAAAEKgAAQlNKQgEAAQAAAAAADAAAAHY0LjAu
MzAzMTkAAAAABQBsAAAALAcAACN+AACYBwAAeAcAACNTdHJpbmdzAAAAABAPAADYAQAAI1VTAOgQ
AAAQAAAAI0dVSUQAAAD4EAAAvAEAACNCbG9iAAAAAAAAAAIAAAFXFaIBCQEAAAD6ATMAFgAAAQAA
ACIAAAAIAAAABwAAACYAAAAZAAAAJAAAABAAAAABAAAAAwAAABMAAAAYAAAAAQAAAAQAAAABAAAA
AAA2AwEAAAAAAAYARAKZBQYA2AKZBQYAkAGGBQ8ADQYAAAYAvQGtBAYAJwKtBAYACAKtBAYAvwKt
BAYAZAKtBAYAfQKtBAYA1AGtBAYA7wH8AgoAmALdAAYApAZYBAoAWAXdAA4ASQXdAAoAEwXdAAoA
4QbdAAYAcwGGBQYAaQW5BQYABwWYBBIAQwEgAxIApAEgAxIAKwGDBAYAWAGZBQYADgdYBAYAGQNY
BAYA3ARYBAYAcARYBAYADABYBAYA9gRYBAYA/gBYBAYAawBYBAYAbgetBAAAAAA2AAAAAAABAAEA
AQAQAHgEAAAQAAEAAQABABAAPAUAAD0AAQADAAEAEADDBgAASQABABoAAQAQAJgGAAA5AAMAHgAB
ABAAWQYAADkABAAfAAAAEADABSoGOQAFACAAAAEQAIgGKgZhAAcAJAAGAJgGigAGAFkGjgABANEG
kgABANEGkgARAGQElgARABsBmgARAFsAngBQIAAAAADGAEsHogABADQhAAAAAIYYeQUGAAIAPCEA
AAAAhhh5BSkAAgBHIQAAAACGCK0AJQAFAFwhAAAAAIYIwAAQAAUAZiEAAAAAhgicA1AABgBvIQAA
AACGCLYDqAAGAIYhAAAAAIYIKwWtAAcAmyEAAAAAhggOBFAABwCkIQAAAACGCL8ErQAHALkhAAAA
AIYI4wNQAAcAwiEAAAAAhgiPACUABwDXIQAAAACGCJ4AEAAHAOEhAAAAAIYIcANQAAgA6iEAAAAA
hgiGA6gACAABIgAAAACGCFAAqAAJABAiAAAAAIYIXgOoAAoAJyIAAAAAhghDBBAACwAxIgAAAACG
CNADqAAMAEgiAAAAAIYIzAQBAA0AVyIAAAAAhgj3A6gADgBuIgAAAACGCBwGAQAPAH0iAAAAAIYI
JgSoABAAlCIAAAAAhgBiB1AAEQCcIgAAAACGAKsGUAARAKQiAAAAAIYYeQUGABEAxCIAAAAAxgA+
B7EAEQDpIgAAAADGATcHogAVAPwiAAAAAMYBSweiABYA/iIAAAAAhhh5BbsAFwANIwAAAACGGHkF
uwAYABwjAAAAAIMYeQUGABkAJCMAAAAAkwhlBcEAGQBQIwAAAACTCAMBxgAZAFcjAAAAAJMIDwHL
ABkAXyMAAAAAlgi3BtEAGgBmIwAAAACGGHkFBgAaAG4jAAAAAJEYfwXWABoAAAABAGYHAAABAF4F
AAACAGMGAAADACEFAAABAPYCAAABAPYCAAABAPYCAAABAPYCAAABAPYCAAABAPYCAAABAPYCAAAB
APYCAAABAPYCAAABAPYCAAABAPYCAAABAPYCAAABAD8AAAACANMAAAADAF4FAAAEACEFAAABAF4F
AAABAGYHAAABAOcGAAABAOcGAAABAPYCCQB5BQEAEQB5BQYAGQB5BQoAKQB5BRAAMQB5BRAAOQB5
BRAAQQB5BRAASQB5BRAAUQB5BRAAWQB5BRAAYQB5BRAAaQB5BQYAmQB5BQYAuQB5BRUAyQB5BQYA
0QABACAA2QBfBCUAeQB5BSkAeQBeBTMAeQBjBjcAgQAWAzsAeQBPBEAAeQA0BEYAeQA7BAEA4QB5
BRAAgQAJAEsAeQBiB1AAeQCrBlAAkQB5BQYA2QCRBlQAkQB3BlsAcQB5BQYAAQF9AGEAAQFqB2oA
oQB5BXAAwQB5BQYALgALAPUALgATAP4ALgAbAB0BLgAjACYBLgArAE8BLgAzAE8BLgA7AE8BLgBD
ACYBLgBLAFUBLgBTAE8BLgBbAGwBQwBjALYB4QB7ALYB4wBrALYBKQJzAB0BSQJzAB0BGwADAAEA
BwARAAgAEwAAAMQA2gAAALoD3gAAAC8F4gAAABIE3gAAANME4gAAAP4D3gAAAKIA2gAAAIoD3gAA
AFQA3gAAAGID3gAAAEcE2gAAANQD3gAAANAE4gAAAPsD3gAAACAG4gAAACoE3gAAAGkF5gAAACMB
6wAAALsG8AACAAQAAwABAAUAAwACAAYABQABAAcABQACAAgABwACAAkACQACAAoACwACAAsADQAC
AAwADwABAA0ADwACAA4AEQABAA8AEQABABAAEwABABEAFQABABIAFwABABMAGQABABQAGwABABUA
HQABABYAHwABABcAIQACACEAIwACACIAJQABACMAJQACACQAJwAEgAAAAQAAAAAAAAAAAAAAAAAS
AAAABAAAAAAAAAAAAAAAeABHAAAAAAAOAAAAAAAAAAAAAACBAPEGAAAAAA4AAAAAAAAAAAAAAIEA
FgcAAAAABAAAAAAAAAAAAAAAeABYBAAAAAAAAAAAAQAAAMoFAAAAAAAAAFRvSW50MzIAR2V0SW50
MzIAU0NfMTJhNmM3NmQyZmRmNDI1YzlkNWE0ZGI1MGM1YmUxNjMAPE1vZHVsZT4ASW5wdXRJRABt
c2NvcmxpYgBzZXRfSWZHb29kAGRlZmF1bHRJbnN0YW5jZQBSdW50aW1lVHlwZUhhbmRsZQBHZXRU
eXBlRnJvbUhhbmRsZQBnZXRfTWVudG9yTmFtZQBzZXRfTWVudG9yTmFtZQBnZXRfQ29udGVzdGFu
dE5hbWUAc2V0X0NvbnRlc3RhbnROYW1lAElucHV0TmFtZQBNaWNyb3NvZnQuU3FsU2VydmVyLkR0
cy5QaXBlbGluZQBUeXBlAGdldF9DdWx0dXJlAHNldF9DdWx0dXJlAHJlc291cmNlQ3VsdHVyZQBB
cHBsaWNhdGlvblNldHRpbmdzQmFzZQBFZGl0b3JCcm93c2FibGVTdGF0ZQBDb21waWxlckdlbmVy
YXRlZEF0dHJpYnV0ZQBEZWJ1Z2dlck5vblVzZXJDb2RlQXR0cmlidXRlAERlYnVnZ2FibGVBdHRy
aWJ1dGUARWRpdG9yQnJvd3NhYmxlQXR0cmlidXRlAEFzc2VtYmx5VGl0bGVBdHRyaWJ1dGUAQXNz
ZW1ibHlUcmFkZW1hcmtBdHRyaWJ1dGUAVGFyZ2V0RnJhbWV3b3JrQXR0cmlidXRlAEFzc2VtYmx5
Q29uZmlndXJhdGlvbkF0dHJpYnV0ZQBBc3NlbWJseURlc2NyaXB0aW9uQXR0cmlidXRlAENvbXBp
bGF0aW9uUmVsYXhhdGlvbnNBdHRyaWJ1dGUAQXNzZW1ibHlQcm9kdWN0QXR0cmlidXRlAEFzc2Vt
Ymx5Q29weXJpZ2h0QXR0cmlidXRlAFNTSVNTY3JpcHRDb21wb25lbnRFbnRyeVBvaW50QXR0cmli
dXRlAEFzc2VtYmx5Q29tcGFueUF0dHJpYnV0ZQBSdW50aW1lQ29tcGF0aWJpbGl0eUF0dHJpYnV0
ZQB2YWx1ZQBTeXN0ZW0uUnVudGltZS5WZXJzaW9uaW5nAEdldFN0cmluZwBTeXN0ZW0uQ29tcG9u
ZW50TW9kZWwAU0NfMTJhNmM3NmQyZmRmNDI1YzlkNWE0ZGI1MGM1YmUxNjMuZGxsAHNldF9JZkdv
b2RfSXNOdWxsAGdldF9NZW50b3JOYW1lX0lzTnVsbABzZXRfTWVudG9yTmFtZV9Jc051bGwAZ2V0
X0NvbnRlc3RhbnROYW1lX0lzTnVsbABzZXRfQ29udGVzdGFudE5hbWVfSXNOdWxsAHNldF9Qcm9i
bGVtX0lzTnVsbABnZXRfUG9zaXRpb25fSXNOdWxsAHNldF9JbnRQb3NpdGlvbl9Jc051bGwAZ2V0
X1Nlcmllc051bWJlcl9Jc051bGwAc2V0X0ludFNlcmllc19Jc051bGwAU2V0TnVsbABzZXRfUHJv
YmxlbQBzZXRfSXRlbQBTeXN0ZW0AVHJpbQByZXNvdXJjZU1hbgBCb29sZWFuAFNjcmlwdE1haW4A
U3lzdGVtLkNvbmZpZ3VyYXRpb24AU3lzdGVtLkdsb2JhbGl6YXRpb24AU3lzdGVtLlJlZmxlY3Rp
b24AZ2V0X1Bvc2l0aW9uAHNldF9JbnRQb3NpdGlvbgBJbnZhbGlkT3BlcmF0aW9uRXhjZXB0aW9u
AFN0cmluZ0NvbXBhcmlzb24AQ3VsdHVyZUluZm8AT3V0cHV0TmFtZU1hcABPdXRwdXRNYXAAZ2V0
X1Nlcmllc051bWJlcgBJbnB1dDBCdWZmZXIAUGlwZWxpbmVCdWZmZXIAU2NyaXB0QnVmZmVyAGdl
dF9SZXNvdXJjZU1hbmFnZXIALmN0b3IALmNjdG9yAFN5c3RlbS5EaWFnbm9zdGljcwBTeXN0ZW0u
UnVudGltZS5Db21waWxlclNlcnZpY2VzAFN5c3RlbS5SZXNvdXJjZXMAU0NfMTJhNmM3NmQyZmRm
NDI1YzlkNWE0ZGI1MGM1YmUxNjMuUHJvcGVydGllcy5SZXNvdXJjZXMucmVzb3VyY2VzAERlYnVn
Z2luZ01vZGVzAHNldF9JbnRTZXJpZXMAU0NfMTJhNmM3NmQyZmRmNDI1YzlkNWE0ZGI1MGM1YmUx
NjMuUHJvcGVydGllcwBWYXJpYWJsZXMAQnVmZmVyQ29sdW1uSW5kZXhlcwBHZXRDb2x1bW5JbmRl
eGVzAFNldHRpbmdzAEVxdWFscwBDb25uZWN0aW9ucwBPYmplY3QARW5kT2ZSb3dzZXQAZ2V0X0Rl
ZmF1bHQAVXNlckNvbXBvbmVudABQYXJlbnRDb21wb25lbnQAU2NyaXB0Q29tcG9uZW50AE1pY3Jv
c29mdC5TcWxTZXJ2ZXIuVHhTY3JpcHQAQ29udmVydABNaWNyb3NvZnQuU3FsU2VydmVyLlBpcGVs
aW5lSG9zdABJbnB1dDBfUHJvY2Vzc0lucHV0AElucHV0MF9Qcm9jZXNzSW5wdXRSb3cATmV4dFJv
dwBnZXRfQXNzZW1ibHkAAABJQQB0ACAAbABlAGEAcwB0ACAAbwBuAGUAIABjAG8AbAB1AG0AbgAg
AGkAcwAgAG4AbwB0ACAAZgBpAGwAbABlAGQAIABpAG4AAGlUAGgAZQAgAHMAZQByAGkAZQBzACAA
YQBuAGQAIABwAG8AcwBpAHQAaQBvAG4AIABuAHUAbQBiAGUAcgBzACAAYQByAGUAbgAnAHQAIABi
AG8AdABoACAAaQBuAHQAZQBnAGUAcgBzAAEBAICbSQBzAE4AdQBsAGwAIABwAHIAbwBwAGUAcgB0
AHkAIABjAGEAbgBuAG8AdAAgAGIAZQAgAHMAZQB0ACAAdABvACAARgBhAGwAcwBlAC4AIABBAHMA
cwBpAGcAbgAgAGEAIAB2AGEAbAB1AGUAIAB0AG8AIAB0AGgAZQAgAGMAbwBsAHUAbQBuACAAaQBu
AHMAdABlAGEAZAAuAAAPSQBuAHAAdQB0ACAAMAAAcVMAQwBfADEAMgBhADYAYwA3ADYAZAAyAGYA
ZABmADQAMgA1AGMAOQBkADUAYQA0AGQAYgA1ADAAYwA1AGIAZQAxADYAMwAuAFAAcgBvAHAAZQBy
AHQAaQBlAHMALgBSAGUAcwBvAHUAcgBjAGUAcwAAAADd69pGrqc+RIFq5TvrLlANAAQgAQEIAyAA
AQUgAQEREQQgAQEOBSABARFZBAcCCAgEAAEICAMgAA4JIAMBEkEdCBJFAwYSQQMGHQgEIAEOCAUg
AgEIHAQgAQIIBCABCAgDIAACBiACAg4RfQUgAR0ICAgAARKAgRGAhQUgABKAiQcgAgEOEoCJCLd6
XFYZNOCJCImEXc2AgMyRAwYSFAMGEhgDBhJJAwYSUQMGElUDBhIgBSABARIMBCABAQIDIAAICSAE
AQgOEkESRQUgAQESSQQAABJRBAAAElUFAAEBElUEAAASIAMAAAEDKAAOAygAAgMoAAgECAASUQQI
ABJVBAgAEiAIAQAIAAAAAAAeAQABAFQCFldyYXBOb25FeGNlcHRpb25UaHJvd3MBCAEAAgAAAAAA
KAEAI1NDXzEyYTZjNzZkMmZkZjQyNWM5ZDVhNGRiNTBjNWJlMTYzAAAFAQAAAAAWAQARQ29weXJp
Z2h0IEAgIDIwMTgAAEkBABouTkVURnJhbWV3b3JrLFZlcnNpb249djQuNQEAVA4URnJhbWV3b3Jr
RGlzcGxheU5hbWUSLk5FVCBGcmFtZXdvcmsgNC41BAEAAAAAtAAAAM7K774BAAAAkQAAAGxTeXN0
ZW0uUmVzb3VyY2VzLlJlc291cmNlUmVhZGVyLCBtc2NvcmxpYiwgVmVyc2lvbj00LjAuMC4wLCBD
dWx0dXJlPW5ldXRyYWwsIFB1YmxpY0tleVRva2VuPWI3N2E1YzU2MTkzNGUwODkjU3lzdGVtLlJl
c291cmNlcy5SdW50aW1lUmVzb3VyY2VTZXQCAAAAAAAAAAAAAABQQURQQURQtAAAABA3AAAAAAAA
AAAAACo3AAAAIAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAcNwAAAAAAAAAAAAAAAF9Db3JEbGxNYWlu
AG1zY29yZWUuZGxsAAAAAAD/JQAgABAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAEAEAAAABgAAIAAAAAAAAAAAAAAAAAAAAEAAQAAADAAAIAAAAAAAAAAAAAAAAAAAAEAAAAAAEgA
AABYQAAA7AMAAAAAAAAAAAAA7AM0AAAAVgBTAF8AVgBFAFIAUwBJAE8ATgBfAEkATgBGAE8AAAAA
AL0E7/4AAAEAAAABAAAAAAAAAAEAAAAAAD8AAAAAAAAABAAAAAIAAAAAAAAAAAAAAAAAAABEAAAA
AQBWAGEAcgBGAGkAbABlAEkAbgBmAG8AAAAAACQABAAAAFQAcgBhAG4AcwBsAGEAdABpAG8AbgAA
AAAAAACwBEwDAAABAFMAdAByAGkAbgBnAEYAaQBsAGUASQBuAGYAbwAAACgDAAABADAAMAAwADAA
MAA0AGIAMAAAABoAAQABAEMAbwBtAG0AZQBuAHQAcwAAAAAAAAAiAAEAAQBDAG8AbQBwAGEAbgB5
AE4AYQBtAGUAAAAAAAAAAABwACQAAQBGAGkAbABlAEQAZQBzAGMAcgBpAHAAdABpAG8AbgAAAAAA
UwBDAF8AMQAyAGEANgBjADcANgBkADIAZgBkAGYANAAyADUAYwA5AGQANQBhADQAZABiADUAMABj
ADUAYgBlADEANgAzAAAAMAAIAAEARgBpAGwAZQBWAGUAcgBzAGkAbwBuAAAAAAAxAC4AMAAuADAA
LgAwAAAAcAAoAAEASQBuAHQAZQByAG4AYQBsAE4AYQBtAGUAAABTAEMAXwAxADIAYQA2AGMANwA2
AGQAMgBmAGQAZgA0ADIANQBjADkAZAA1AGEANABkAGIANQAwAGMANQBiAGUAMQA2ADMALgBkAGwA
bAAAAEgAEgABAEwAZQBnAGEAbABDAG8AcAB5AHIAaQBnAGgAdAAAAEMAbwBwAHkAcgBpAGcAaAB0
ACAAQAAgACAAMgAwADEAOAAAACoAAQABAEwAZQBnAGEAbABUAHIAYQBkAGUAbQBhAHIAawBzAAAA
AAAAAAAAeAAoAAEATwByAGkAZwBpAG4AYQBsAEYAaQBsAGUAbgBhAG0AZQAAAFMAQwBfADEAMgBh
ADYAYwA3ADYAZAAyAGYAZABmADQAMgA1AGMAOQBkADUAYQA0AGQAYgA1ADAAYwA1AGIAZQAxADYA
MwAuAGQAbABsAAAAaAAkAAEAUAByAG8AZAB1AGMAdABOAGEAbQBlAAAAAABTAEMAXwAxADIAYQA2
AGMANwA2AGQAMgBmAGQAZgA0ADIANQBjADkAZAA1AGEANABkAGIANQAwAGMANQBiAGUAMQA2ADMA
AAA0AAgAAQBQAHIAbwBkAHUAYwB0AFYAZQByAHMAaQBvAG4AAAAxAC4AMAAuADAALgAwAAAAOAAI
AAEAQQBzAHMAZQBtAGIAbAB5ACAAVgBlAHIAcwBpAG8AbgAAADEALgAwAC4AMAAuADAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAMAAADAAAADw3AAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA==]]></arrayElement>
                  </arrayElements>
                </property>
                <property
                  dataType="System.String"
                  description="Specifies the name of the Microsoft Visual Studio Tools for Applications project. Project names must be unique within a package."
                  name="VSTAProjectName"
                  typeConverter="NOTBROWSABLE">SC_12a6c76d2fdf425c9d5a4db50c5be163</property>
                <property
                  dataType="System.String"
                  description="Specifies the programming language used by the script."
                  name="ScriptLanguage"
                  typeConverter="Microsoft.SqlServer.VSTAHosting.ScriptingLanguages">CSharp</property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read-only variables."
                  name="ReadOnlyVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="Specifies a comma-separated list of read/write variables."
                  name="ReadWriteVariables"
                  UITypeEditor="Microsoft.DataTransformationServices.Controls.ScriptUIWriteableVariablePickerDlg"></property>
                <property
                  dataType="System.String"
                  description="List of breakpoints present on the script."
                  isArray="true"
                  name="BreakpointCollection"
                  typeConverter="NOTBROWSABLE">
                  <arrayElements
                    arrayElementCount="0" />
                </property>
                <property
                  dataType="System.String"
                  description="Checksum to match component metedata against compiled codes."
                  name="MetadataChecksum140"
                  typeConverter="NOTBROWSABLE">37</property>
                <property
                  dataType="System.String"
                  name="UserComponentTypeName">Microsoft.ScriptComponentHost</property>
              </properties>
              <inputs>
                <input
                  refId="Package\Import dodgy Data\Validate data.Inputs[Input 0]"
                  hasSideEffects="true"
                  name="Input 0">
                  <inputColumns>
                    <inputColumn
                      refId="Package\Import dodgy Data\Validate data.Inputs[Input 0].Columns[ContestantName]"
                      cachedCodepage="936"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="ContestantName"
                      lineageId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output].Columns[ContestantName]"
                      usageType="readWrite" />
                    <inputColumn
                      refId="Package\Import dodgy Data\Validate data.Inputs[Input 0].Columns[SeriesNumber]"
                      cachedDataType="i4"
                      cachedName="SeriesNumber"
                      lineageId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output].Columns[SeriesNumber]" />
                    <inputColumn
                      refId="Package\Import dodgy Data\Validate data.Inputs[Input 0].Columns[Position]"
                      cachedDataType="i4"
                      cachedName="Position"
                      lineageId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output].Columns[Position]" />
                    <inputColumn
                      refId="Package\Import dodgy Data\Validate data.Inputs[Input 0].Columns[MentorName]"
                      cachedCodepage="936"
                      cachedDataType="str"
                      cachedLength="50"
                      cachedName="MentorName"
                      lineageId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output].Columns[MentorName]"
                      usageType="readWrite" />
                  </inputColumns>
                  <externalMetadataColumns />
                </input>
              </inputs>
              <outputs>
                <output
                  refId="Package\Import dodgy Data\Validate data.Outputs[Output 0]"
                  name="Output 0"
                  synchronousInputId="Package\Import dodgy Data\Validate data.Inputs[Input 0]">
                  <outputColumns>
                    <outputColumn
                      refId="Package\Import dodgy Data\Validate data.Outputs[Output 0].Columns[IfGood]"
                      dataType="bool"
                      lineageId="Package\Import dodgy Data\Validate data.Outputs[Output 0].Columns[IfGood]"
                      name="IfGood" />
                    <outputColumn
                      refId="Package\Import dodgy Data\Validate data.Outputs[Output 0].Columns[Problem]"
                      codePage="936"
                      dataType="str"
                      length="1000"
                      lineageId="Package\Import dodgy Data\Validate data.Outputs[Output 0].Columns[Problem]"
                      name="Problem" />
                    <outputColumn
                      refId="Package\Import dodgy Data\Validate data.Outputs[Output 0].Columns[IntPosition]"
                      dataType="i4"
                      lineageId="Package\Import dodgy Data\Validate data.Outputs[Output 0].Columns[IntPosition]"
                      name="IntPosition" />
                    <outputColumn
                      refId="Package\Import dodgy Data\Validate data.Outputs[Output 0].Columns[IntSeries]"
                      dataType="i4"
                      lineageId="Package\Import dodgy Data\Validate data.Outputs[Output 0].Columns[IntSeries]"
                      name="IntSeries" />
                  </outputColumns>
                  <externalMetadataColumns />
                </output>
              </outputs>
            </component>
          </components>
          <paths>
            <path
              refId="Package\Import dodgy Data.Paths[Bad Data]"
              endId="Package\Import dodgy Data\Import bad data.Inputs[OLE DB Destination Input]"
              name="Bad Data"
              startId="Package\Import dodgy Data\Conditional Split.Outputs[Bad Data]" />
            <path
              refId="Package\Import dodgy Data.Paths[Flat File Source Output]"
              endId="Package\Import dodgy Data\Validate data.Inputs[Input 0]"
              name="Flat File Source Output"
              startId="Package\Import dodgy Data\Dodgy data import.Outputs[Flat File Source Output]" />
            <path
              refId="Package\Import dodgy Data.Paths[Good Data]"
              endId="Package\Import dodgy Data\Import good data.Inputs[OLE DB Destination Input]"
              name="Good Data"
              startId="Package\Import dodgy Data\Conditional Split.Outputs[Good Data]" />
            <path
              refId="Package\Import dodgy Data.Paths[Output 0]"
              endId="Package\Import dodgy Data\Conditional Split.Inputs[Conditional Split Input]"
              name="Output 0"
              startId="Package\Import dodgy Data\Validate data.Outputs[Output 0]" />
          </paths>
        </pipeline>
      </DTS:ObjectData>
    </DTS:Executable>
  </DTS:Executables>
  <DTS:PrecedenceConstraints>
    <DTS:PrecedenceConstraint
      DTS:refId="Package.PrecedenceConstraints[Constraint]"
      DTS:CreationName=""
      DTS:DTSID="{A8BAAF76-CEC5-4F4F-A50C-FE7D3B50E08C}"
      DTS:From="Package\Delete old data"
      DTS:LogicalAnd="True"
      DTS:ObjectName="Constraint"
      DTS:To="Package\Import dodgy Data" />
  </DTS:PrecedenceConstraints>
  <DTS:DesignTimeProperties><![CDATA[<?xml version="1.0"?>
<!--This CDATA section contains the layout information of the package. The section includes information such as (x,y) coordinates, width, and height.-->
<!--If you manually edit this section and make a mistake, you can delete it. -->
<!--The package will still be able to load normally but the previous layout information will be lost and the designer will automatically re-arrange the elements on the design surface.-->
<Objects
  Version="8">
  <!--Each node below will contain properties that do not affect runtime behavior.-->
  <Package
    design-time-name="Package">
    <LayoutInfo>
      <GraphLayout
        Capacity="4" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="150.5,42"
          Id="Package\Delete old data"
          TopLeft="43,33.6666666666667" />
        <NodeLayout
          Size="168,42"
          Id="Package\Import dodgy Data"
          TopLeft="32.75,123.638888888889" />
        <EdgeLayout
          Id="Package.PrecedenceConstraints[Constraint]"
          TopLeft="117.5,75.6666666666667">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,47.972222222222"
              Start="0,0"
              End="0,40.472222222222">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,40.472222222222" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-17.9932421875,15.459255642361,35.986484375,9.5537109375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </Package>
  <TaskHost
    design-time-name="Package\Import dodgy Data">
    <LayoutInfo>
      <GraphLayout
        Capacity="16" xmlns="clr-namespace:Microsoft.SqlServer.IntegrationServices.Designer.Model.Serialization;assembly=Microsoft.SqlServer.IntegrationServices.Graph" xmlns:mssgle="clr-namespace:Microsoft.SqlServer.Graph.LayoutEngine;assembly=Microsoft.SqlServer.Graph" xmlns:assembly="http://schemas.microsoft.com/winfx/2006/xaml" xmlns:mssgm="clr-namespace:Microsoft.SqlServer.Graph.Model;assembly=Microsoft.SqlServer.Graph">
        <NodeLayout
          Size="162,42"
          Id="Package\Import dodgy Data\Import good data"
          TopLeft="30.8333333333333,353.75" />
        <NodeLayout
          Size="167,42"
          Id="Package\Import dodgy Data\Dodgy data import"
          TopLeft="141,7" />
        <NodeLayout
          Size="140.5,42"
          Id="Package\Import dodgy Data\Validate data"
          TopLeft="153.166666666667,82.6111111111111" />
        <NodeLayout
          Size="156,42"
          Id="Package\Import dodgy Data\Import bad data"
          TopLeft="287.916666666667,352.083333333333" />
        <NodeLayout
          Size="155,42"
          Id="Package\Import dodgy Data\Conditional Split"
          TopLeft="142.916666666667,192.5" />
        <EdgeLayout
          Id="Package\Import dodgy Data.Paths[Bad Data]"
          TopLeft="244.916666666667,234.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="121,117.583333333333"
              Start="0,0"
              End="121,110.083333333333">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,43.7541507024266" />
                  <mssgle:CubicBezierSegment
                    Point1="0,43.7541507024266"
                    Point2="0,47.7541507024266"
                    Point3="4,47.7541507024266" />
                  <mssgle:LineSegment
                    End="117,47.7541507024266" />
                  <mssgle:CubicBezierSegment
                    Point1="117,47.7541507024266"
                    Point2="121,47.7541507024266"
                    Point3="121,51.7541507024266" />
                  <mssgle:LineSegment
                    End="121,110.083333333333" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="39.9716406250001,52.7541507024266,41.05671875,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Import dodgy Data.Paths[Output 0]"
          TopLeft="221.916666666667,124.611111111111">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,67.8888888888889"
              Start="0,0"
              End="0,60.3888888888889">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,60.3888888888889" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Import dodgy Data.Paths[Good Data]"
          TopLeft="195.916666666667,234.5">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="-84.0833333333333,119.25"
              Start="0,0"
              End="-84.0833333333333,111.75">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,44.4310344827586" />
                  <mssgle:CubicBezierSegment
                    Point1="0,44.4310344827586"
                    Point2="0,48.4310344827586"
                    Point3="-4,48.4310344827586" />
                  <mssgle:LineSegment
                    End="-80.0833333333333,48.4310344827586" />
                  <mssgle:CubicBezierSegment
                    Point1="-80.0833333333333,48.4310344827586"
                    Point2="-84.0833333333333,48.4310344827586"
                    Point3="-84.0833333333333,52.4310344827586" />
                  <mssgle:LineSegment
                    End="-84.0833333333333,111.75" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <mssgm:EdgeLabel
              BoundingBox="-65.9725455729166,53.4310344827586,47.8617578125,9.7490234375"
              RelativePosition="Any" />
          </EdgeLayout.Labels>
        </EdgeLayout>
        <EdgeLayout
          Id="Package\Import dodgy Data.Paths[Flat File Source Output]"
          TopLeft="223.958333333333,49">
          <EdgeLayout.Curve>
            <mssgle:Curve
              StartConnector="{assembly:Null}"
              EndConnector="0,33.6111111111111"
              Start="0,0"
              End="0,26.1111111111111">
              <mssgle:Curve.Segments>
                <mssgle:SegmentCollection
                  Capacity="5">
                  <mssgle:LineSegment
                    End="0,26.1111111111111" />
                </mssgle:SegmentCollection>
              </mssgle:Curve.Segments>
            </mssgle:Curve>
          </EdgeLayout.Curve>
          <EdgeLayout.Labels>
            <EdgeLabelCollection />
          </EdgeLayout.Labels>
        </EdgeLayout>
      </GraphLayout>
    </LayoutInfo>
  </TaskHost>
  <PipelineComponentMetadata
    design-time-name="Package\Import dodgy Data\Import bad data">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
  <PipelineComponentMetadata
    design-time-name="Package\Import dodgy Data\Import good data">
    <Properties>
      <Property>
        <Name>DataSourceViewID</Name>
      </Property>
      <Property>
        <Name>TableInfoObjectType</Name>
        <Value
          type="q2:string">Table</Value>
      </Property>
    </Properties>
  </PipelineComponentMetadata>
</Objects>]]></DTS:DesignTimeProperties>
</DTS:Executable>